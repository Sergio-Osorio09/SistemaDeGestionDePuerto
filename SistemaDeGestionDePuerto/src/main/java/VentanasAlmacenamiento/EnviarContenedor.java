
package VentanasAlmacenamiento;
import Clases.CConexion;
import com.mycompany.sistemadegestiondepuerto.InterfazOperadorAlmacenamiento;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class EnviarContenedor extends javax.swing.JFrame {
    CConexion con=new CConexion();
    Connection CConexion=con.estableceConexion();
    public EnviarContenedor() {
        initComponents();
        mostrardatos();
        mostrardatos1();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        IdContenedor = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaContenedores = new javax.swing.JTable();
        ActualizarContenedor = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        IdZona = new javax.swing.JTextField();
        ActualizarZona = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaZona = new javax.swing.JTable();
        salir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enviar Contenedor a Cliente ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 1, 18))); // NOI18N
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 16)))); // NOI18N

        IdContenedor.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ID", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        IdContenedor.setEnabled(false);

        TablaContenedores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablaContenedores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaContenedoresMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaContenedores);

        ActualizarContenedor.setText("Enviar");
        ActualizarContenedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarContenedorActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Asignar zona"), "Zona de Almacenamiento", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 16))); // NOI18N

        IdZona.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        IdZona.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ID", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        IdZona.setEnabled(false);

        ActualizarZona.setText("Actualizar");
        ActualizarZona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarZonaActionPerformed(evt);
            }
        });

        TablaZona.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablaZona.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaZonaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TablaZona);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(IdZona, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(ActualizarZona)))
                .addGap(74, 74, 74)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(IdZona, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(ActualizarZona))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(IdContenedor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ActualizarContenedor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(63, 63, 63)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(IdContenedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(ActualizarContenedor, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(435, 435, 435)
                        .addComponent(salir, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(salir)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ActualizarContenedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarContenedorActionPerformed
        try {
        String estado = "Entregado"; // Estado fijo para el contenedor
        
        // Actualizar el estado del contenedor
        PreparedStatement psContenedor = CConexion.prepareStatement("UPDATE contenedor SET estadoContenedor=? WHERE idContenedor=?");
        psContenedor.setString(1, estado);
        psContenedor.setString(2, IdContenedor.getText());
        
        int indiceContenedor = psContenedor.executeUpdate();
        if (indiceContenedor > 0) {
            // Obtener el ID de la zona de almacenamiento asociada al contenedor
            String idContenedor = IdContenedor.getText();
            PreparedStatement psIdZona = CConexion.prepareStatement("SELECT idZonaDeAlmacenamiento FROM contenedor WHERE idContenedor=?");
            psIdZona.setString(1, idContenedor);
            ResultSet rsIdZona = psIdZona.executeQuery();

            if (rsIdZona.next()) {
                String idZona = rsIdZona.getString("idZonaDeAlmacenamiento");
                
                // Actualizar la cantidad actual en la zona de almacenamiento
                PreparedStatement psZona = CConexion.prepareStatement("UPDATE zonadealmacenamiento SET cantidadActual = cantidadActual - 1 WHERE idZonaDeAlmacenamiento=?");
                psZona.setString(1, idZona);
                
                int indiceZona = psZona.executeUpdate();
                if (indiceZona > 0) {
                    JOptionPane.showMessageDialog(rootPane, "Datos Actualizados Correctamente");
                    mostrardatos();
                    limpiarentradasContenedor();
                } else {
                    JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna fila para actualizar");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró la zona de almacenamiento asociada al contenedor");
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna fila para actualizar");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al actualizar datos: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_ActualizarContenedorActionPerformed

    private void TablaContenedoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaContenedoresMouseClicked
        ActualizarContenedor.setEnabled(true);
        int fila=this.TablaContenedores.getSelectedRow();
        this.IdContenedor.setText(this.TablaContenedores.getValueAt(fila, 0).toString());
    }//GEN-LAST:event_TablaContenedoresMouseClicked

    private void TablaZonaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaZonaMouseClicked
        ActualizarZona.setEnabled(true);
        int fila=this.TablaZona.getSelectedRow();
        this.IdZona.setText(this.TablaZona.getValueAt(fila, 0).toString()); 
    }//GEN-LAST:event_TablaZonaMouseClicked

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        ActualizarContenedor.setEnabled(false);
        limpiarentradasContenedor();
        limpiarentradasZona();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void ActualizarZonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarZonaActionPerformed
        mostrardatos1();
    }//GEN-LAST:event_ActualizarZonaActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        InterfazOperadorAlmacenamiento salir = new InterfazOperadorAlmacenamiento();
        salir.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_salirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EnviarContenedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EnviarContenedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EnviarContenedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EnviarContenedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EnviarContenedor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ActualizarContenedor;
    private javax.swing.JButton ActualizarZona;
    private javax.swing.JTextField IdContenedor;
    private javax.swing.JTextField IdZona;
    private javax.swing.JTable TablaContenedores;
    private javax.swing.JTable TablaZona;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton salir;
    // End of variables declaration//GEN-END:variables
private void mostrardatos() {
        DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("idContenedor");
        modelo.addColumn("TipoDeCarga");
        modelo.addColumn("UbicacionContenedor");
        modelo.addColumn("ValidezDeCarga");
        modelo.addColumn("DestinoContenedor");
        modelo.addColumn("propietarioContenedor");
        modelo.addColumn("idZonaDeAlmacenamiento");
        modelo.addColumn("estadoContenedor");
        TablaContenedores.setModel(modelo);
        String consultasql = "SELECT * FROM contenedor WHERE ValidezDeCarga='Válido' AND DestinoContenedor = 'Peru'";
        String data[]=new String[8];
        
        Statement st;
        try{
            st=CConexion.createStatement();
            ResultSet rs=st.executeQuery(consultasql);
            while(rs.next()){
                data[0]=rs.getString(1);
                data[1]=rs.getString(2);
                data[2]=rs.getString(3);
                data[3]=rs.getString(4);
                data[4]=rs.getString(5);
                data[5]=rs.getString(6);
                data[6]=rs.getString(7);
                data[7]=rs.getString(8);
                modelo.addRow(data);
            }
        } catch(SQLException e){
            System.out.println("Error al mostrar Datos "+ e);
        }
    }
    private void limpiarentradasContenedor() {
        IdContenedor.setText("");  
    }
   
    private void mostrardatos1() {
        DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("idZonaDeAlmacenamiento");
        modelo.addColumn("nombreZonaDeAlmacenamiento");
        modelo.addColumn("TipoDeCarga");
        modelo.addColumn("CapacidadMaxima");
        modelo.addColumn("CantidadActual");
        TablaZona.setModel(modelo);
        String consultasql = "SELECT * FROM zonadealmacenamiento WHERE nombreZonaDeAlmacenamiento = 'ZonaDeEntrada' ";
        String data[]=new String[5];
        
        Statement st;
        try{
            st=CConexion.createStatement();
            ResultSet rs=st.executeQuery(consultasql);
            while(rs.next()){
                data[0]=rs.getString(1);
                data[1]=rs.getString(2);
                data[2]=rs.getString(3);
                data[3]=rs.getString(4);
                data[4]=rs.getString(5);
                modelo.addRow(data);
            }
        } catch(SQLException e){
            System.out.println("Error al mostrar Datos "+ e);
        }
    }
    
    private void limpiarentradasZona() {
        IdZona.setText("");  
    }

}
