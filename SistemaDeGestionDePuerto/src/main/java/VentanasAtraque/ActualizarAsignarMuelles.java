/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package VentanasAtraque;

import Clases.CConexion;
import com.mycompany.sistemadegestiondepuerto.InterfazOperadorAtraque;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author villa
 */
public class ActualizarAsignarMuelles extends javax.swing.JFrame {

    CConexion con = new CConexion();
    Connection CConexion = con.estableceConexion();
    
    public ActualizarAsignarMuelles() {
        initComponents();
        mostrardatosmuelle();
        mostrardatosbarco();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaMuelles = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaBarcos = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        TextoCantidad = new javax.swing.JTextField();
        TextoAsignarMuelle = new javax.swing.JTextField();
        TextoCapacidad = new javax.swing.JTextField();
        TextoDestino = new javax.swing.JTextField();
        TextoIdBarco = new javax.swing.JTextField();
        TextoEstado = new javax.swing.JTextField();
        BotonAsignar = new javax.swing.JButton();
        BotonActualizar = new javax.swing.JButton();
        BotonVolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ACTUALIZAR Y ASIGNAR MUELLES", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 18))); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "VISUALIZAR MUELLES", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        TablaMuelles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablaMuelles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMuellesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TablaMuelles);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "VISUALIZAR BARCOS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        TablaBarcos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablaBarcos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaBarcosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaBarcos);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ASIGNAR MUELLE", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        TextoCantidad.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cantidad Descargable", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        TextoCantidad.setEnabled(false);

        TextoAsignarMuelle.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Asignar Muelle", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        TextoAsignarMuelle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextoAsignarMuelleActionPerformed(evt);
            }
        });

        TextoCapacidad.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Capacidad Maxima", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        TextoCapacidad.setEnabled(false);

        TextoDestino.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Destino de Barco", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        TextoDestino.setEnabled(false);

        TextoIdBarco.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ID Barco", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        TextoIdBarco.setEnabled(false);
        TextoIdBarco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextoIdBarcoActionPerformed(evt);
            }
        });

        TextoEstado.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Estado de Operaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        TextoEstado.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TextoIdBarco, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addComponent(TextoDestino))
                .addGap(58, 58, 58)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TextoCapacidad, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addComponent(TextoCantidad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TextoAsignarMuelle, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addComponent(TextoEstado))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TextoEstado, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(TextoCantidad)
                    .addComponent(TextoIdBarco, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(TextoCapacidad, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(TextoDestino)
                    .addComponent(TextoAsignarMuelle))
                .addContainerGap())
        );

        BotonAsignar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BotonAsignar.setText("Asignar");
        BotonAsignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAsignarActionPerformed(evt);
            }
        });

        BotonActualizar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BotonActualizar.setText("Actualizar");
        BotonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonActualizarActionPerformed(evt);
            }
        });

        BotonVolver.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BotonVolver.setText("Volver");
        BotonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(BotonAsignar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BotonActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(BotonVolver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 67, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(BotonAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(BotonActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(BotonVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextoAsignarMuelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextoAsignarMuelleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextoAsignarMuelleActionPerformed

    private void BotonAsignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAsignarActionPerformed
        try {
            // Verificar si se ha seleccionado una fila en la tabla
            if (TablaBarcos.getSelectedRow() < 0) {
                JOptionPane.showMessageDialog(null, "Por favor, seleccione una fila en la tabla antes de continuar");
                return;
            }

            // Verificar si el estado de operaciones del barco es 'Aprobado' y si no hay otro barco aprobado con el mismo idMuelle
            String query = "SELECT COUNT(*) FROM barco WHERE idMuelle = ? AND OperacionesBarco = 'Aprobado'";
            try (PreparedStatement stmt = CConexion.prepareStatement(query)) {
                stmt.setInt(1, Integer.parseInt(TextoAsignarMuelle.getText()));
                ResultSet rs = stmt.executeQuery();
                rs.next();
                int count = rs.getInt(1);

                if (count == 0 || TextoEstado.getText().equals("Finalizado")) {
                    // Si no hay conflictos, actualizar los datos del barco
                    query = "UPDATE barco SET DestinoBarco = ?, CantidadDescargable = ?, CapacidadMaxima = ?, idMuelle = ? WHERE idBarco = ? AND OperacionesBarco = 'Aprobado'";
                    try (PreparedStatement updateStmt = CConexion.prepareStatement(query)) {
                        updateStmt.setString(1, TextoDestino.getText());
                        updateStmt.setInt(2, Integer.parseInt(TextoCantidad.getText()));
                        updateStmt.setInt(3, Integer.parseInt(TextoCapacidad.getText()));
                        updateStmt.setInt(4, Integer.parseInt(TextoAsignarMuelle.getText()));
                        updateStmt.setInt(5, Integer.parseInt(TextoIdBarco.getText()));
                        int rowsAffected = updateStmt.executeUpdate();

                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(rootPane, "Datos actualizados correctamente");
                            mostrardatosbarco();
                            limpiarentradas();
                        } else {
                            JOptionPane.showMessageDialog(null, "No se pudo actualizar los datos del barco");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Este muelle se encuentra ocupado, seleccione otro muelle");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "El muelle ingresado no existe, seleccione otro muelle");
        }
    }//GEN-LAST:event_BotonAsignarActionPerformed

    private void TextoIdBarcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextoIdBarcoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextoIdBarcoActionPerformed

    private void TablaBarcosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaBarcosMouseClicked
        int fila = this.TablaBarcos.getSelectedRow();
        this.TextoIdBarco.setText(this.TablaBarcos.getValueAt(fila, 0).toString());
        this.TextoDestino.setText(this.TablaBarcos.getValueAt(fila, 1).toString());
        this.TextoCantidad.setText(this.TablaBarcos.getValueAt(fila, 2).toString());
        this.TextoCapacidad.setText(this.TablaBarcos.getValueAt(fila, 3).toString());
        this.TextoEstado.setText(this.TablaBarcos.getValueAt(fila, 4).toString());
        this.TextoAsignarMuelle.setText(this.TablaBarcos.getValueAt(fila, 5).toString());
    }//GEN-LAST:event_TablaBarcosMouseClicked

    private void BotonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonVolverActionPerformed
        InterfazOperadorAtraque atraque = new InterfazOperadorAtraque();
        atraque.setLocationRelativeTo(null);
        atraque.setSize(420,400);
        atraque.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BotonVolverActionPerformed

    private void TablaMuellesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMuellesMouseClicked
        int fila = this.TablaMuelles.getSelectedRow();
    }//GEN-LAST:event_TablaMuellesMouseClicked

    private void BotonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonActualizarActionPerformed
        try {
            // Obtener los IDs de muelle y las operaciones de barco desde la tabla Barco
            PreparedStatement psConsultaBarco = CConexion.prepareStatement("SELECT idMuelle, OperacionesBarco FROM Barco");
            ResultSet rsConsultaBarco = psConsultaBarco.executeQuery();

            // Crear una lista para almacenar los IDs de muelle de la tabla Barco con operaciones aprobadas
            List<Integer> idMuellesBarcoAprobados = new ArrayList<>();

            // Iterar a través de los resultados y almacenar los IDs de muelle con operaciones aprobadas
            while (rsConsultaBarco.next()) {
                int idMuelleBarco = rsConsultaBarco.getInt("idMuelle");
                String operacionesBarco = rsConsultaBarco.getString("OperacionesBarco");
                if (operacionesBarco.equals("Aprobado")) {
                    idMuellesBarcoAprobados.add(idMuelleBarco);
                }
            }

            // Consultar la tabla Muelle para obtener todos los IDs de muelle
            PreparedStatement psConsultaMuelle = CConexion.prepareStatement("SELECT idMuelle FROM Muelle");
            ResultSet rsConsultaMuelle = psConsultaMuelle.executeQuery();

            // Iterar a través de los IDs de muelle de la tabla Muelle
            while (rsConsultaMuelle.next()) {
                int idMuelleMuelle = rsConsultaMuelle.getInt("idMuelle");

                // Verificar si el ID de muelle de la tabla Muelle está en la lista de IDs de muelle de la tabla Barco con operaciones aprobadas
                if (idMuellesBarcoAprobados.contains(idMuelleMuelle)) {
                    // Si el ID de muelle está presente en la tabla Barco con operaciones aprobadas, cambiar el estado del muelle a "No Disponible"
                    PreparedStatement psCambiarEstadoMuelle = CConexion.prepareStatement("UPDATE Muelle SET EstadoDeMuelle = 'No Disponible' WHERE idMuelle = ?");
                    psCambiarEstadoMuelle.setInt(1, idMuelleMuelle);
                    psCambiarEstadoMuelle.executeUpdate();
                } else {
                    // Si el ID de muelle no está presente en la tabla Barco con operaciones aprobadas, cambiar el estado del muelle a "Disponible"
                    PreparedStatement psCambiarEstadoMuelle = CConexion.prepareStatement("UPDATE Muelle SET EstadoDeMuelle = 'Disponible' WHERE idMuelle = ?");
                    psCambiarEstadoMuelle.setInt(1, idMuelleMuelle);
                    psCambiarEstadoMuelle.executeUpdate();
                }
            }

            // Mostrar mensaje de éxito
            JOptionPane.showMessageDialog(rootPane, "Datos actualizados correctamente");
            mostrardatosmuelle();
            limpiarentradas();

        } catch (SQLException e) {
            // Mostrar mensaje de error en caso de excepción
            JOptionPane.showMessageDialog(null, "Error al actualizar datos");
            e.printStackTrace();
        }
    }//GEN-LAST:event_BotonActualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ActualizarAsignarMuelles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ActualizarAsignarMuelles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ActualizarAsignarMuelles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ActualizarAsignarMuelles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ActualizarAsignarMuelles().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonActualizar;
    private javax.swing.JButton BotonAsignar;
    private javax.swing.JButton BotonVolver;
    private javax.swing.JTable TablaBarcos;
    private javax.swing.JTable TablaMuelles;
    private javax.swing.JTextField TextoAsignarMuelle;
    private javax.swing.JTextField TextoCantidad;
    private javax.swing.JTextField TextoCapacidad;
    private javax.swing.JTextField TextoDestino;
    private javax.swing.JTextField TextoEstado;
    private javax.swing.JTextField TextoIdBarco;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void mostrardatosmuelle() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Muelle");
        modelo.addColumn("Estado de Muelle");
        TablaMuelles.setModel(modelo);
        String consultasql = "select*from muelle";
        String data[] = new String[2];
        
        Statement st;
        try {
            st = CConexion.createStatement();
            ResultSet rs = st.executeQuery(consultasql);
            while(rs.next()){
                data[0] = rs.getString(1);
                data[1] = rs.getString(2);
                modelo.addRow(data);
            }
        }catch (SQLException e) {
            System.out.println("Error al mostrar datos " + e);
        }
    }

    private void mostrardatosbarco() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Barco");
        modelo.addColumn("Destino de Barco");
        modelo.addColumn("Cantidad Descargable");
        modelo.addColumn("Capacidad Maxima");
        modelo.addColumn("Estado de Operaciones");
        modelo.addColumn("Muelle Asignado");
        TablaBarcos.setModel(modelo);
        String consultasql = "select*from barco where OperacionesBarco = 'Aprobado'";
        String data[] = new String[6];
        
        Statement st;
        try{
            st = CConexion.createStatement();
            ResultSet rs = st.executeQuery(consultasql);
            while(rs.next()){
                data[0] = rs.getString(1);
                data[1] = rs.getString(2);
                data[2] = rs.getString(3);
                data[3] = rs.getString(4);
                data[4] = rs.getString(5);
                data[5] = rs.getString(6);
                modelo.addRow(data);
            }
        } catch(SQLException e){
            System.out.println("Error al mostrar datos " + e);
        }
    }

    private void limpiarentradas() {
        TextoIdBarco.setText("");
        TextoDestino.setText("");
        TextoCantidad.setText("");
        TextoCapacidad.setText("");
        TextoEstado.setText("");
        TextoAsignarMuelle.setText("");
    }
}
